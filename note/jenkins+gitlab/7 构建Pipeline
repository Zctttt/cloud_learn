主要有三种类型
    自由风格
    Maven项目
    流水线风格 !!!!!

Pipeline 时在jenkins上的工作流框架
    Pipeline由Govooy语言编写
    Pipeline支持两种语法 Declarative （声明式）和Scripted Pipeline（脚本式）
    Pipeline支持两种创建方法 UI 或者创建一个jenkinsfile文件

安装Pipeline插件

Declarative（声明式）

    pipeline {
        // 环境 工具
        agent any

        // 阶段 步奏
        stages {
            stage('pull code') {
                // 步
                steps {
                    echo 'pull code'
                }
            }

            stage('build') {
                // 步
                steps {
                    echo 'build'
                }
            }

            stage('publish') {
                // 步
                steps {
                    echo 'publish'
                }
            }
        }
    }


Scripted Pipeline （脚本式）

node {
    // 环境 工具
    def mvnHome

     // 阶段 步奏
     stage('pull code') { {
        echo 'pull code'
    }
     stage('build') {
         echo 'build'
     }

     stage('publish') {
         echo 'publish'
     }
}


拉取gitlab脚本
        点击流水线语法
            片段生成器（脚本式）
            Declarative Directive Generation（声明式）
        选择checkout 输入仓库地址 选择Credentials（验证） Branches to build 拉取分支
        点击git拉取生成脚本(pull)
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'e31d5f19-6281-4941-82ff-6b61b6bcd42c', url: 'git@192.168.128.134:first-group/first-project.git']]])
        点击sh(build)
            mnv clean package
        点击deploy（deploy）

        pipeline {
            agent any

            stages {
                stage('git pull') {
                    steps {
                        checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'e31d5f19-6281-4941-82ff-6b61b6bcd42c', url: 'git@192.168.128.134:first-group/first-project.git']]])
                    }
                }


                stage('build') {
                    steps {
                        sh 'mvn clean package'
                   }
                }

                stage('deploy') {
                    steps {
                        deploy adapters: [tomcat8(credentialsId: '3b79bcf2-8000-44cd-b615-58dca90509e0', path: '', url: 'http://192.168.128.129:8080')], contextPath: null, war: 'target/*war'
                   }
                }
            }
        }

jenkinsfile
    根目录下写jenkinsfile
    pipeline {
       agent any

       stages {
          stage('pull code') {
             steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/${branch}']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'b632ed00-fc81-43c8-a746-5aa0673b2658', url: 'git@192.168.66.100:itheima_group/web_demo.git']]])
             }
          }
          stage('code checking') {
             steps {

                script {
                     //引入SonarQubeScanner工具
                    scannerHome = tool 'sonar-scanner'
                }
                //引入SonarQube的服务器环境
                withSonarQubeEnv('sonarqube') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
             }
          }
          stage('build project') {
             steps {
                sh 'mvn clean package'
             }
          }
          stage('publish project') {
             steps {
                deploy adapters: [tomcat8(credentialsId: 'fc23e5b7-9930-4dfb-af66-a2a576be52fb', path: '', url: 'http://192.168.66.102:8080')], contextPath: null, war: 'target/*.war'
             }
          }
       }
       post {
             always {
                emailext(
                   subject: '构建通知：${PROJECT_NAME} - Build # ${BUILD_NUMBER} - ${BUILD_STATUS}!',
                   body: '${FILE,path="email.html"}',
                   to: '1014671449@qq.com'
                )
             }
       }
    }
